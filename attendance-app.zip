PK
     �V               AttendanceApp/
PK
     �V               AttendanceApp/app/
PK
     �V               AttendanceApp/app/src/
PK
     �V               AttendanceApp/app/src/main/
PK
     �V            &   AttendanceApp/app/src/main/java/
PK
     �V            *   AttendanceApp/app/src/main/java/com/
PK
     �V            2   AttendanceApp/app/src/main/java/com/example/
PK
     �V            ?   AttendanceApp/app/src/main/java/com/example/attendanceapp/
PK
     �V            $   AttendanceApp/app/src/main/res/
PK
     �V            +   AttendanceApp/app/src/main/res/layout/
PK
     �V            ,   AttendanceApp/app/src/main/res/values/
PK
     �V            ,   AttendanceApp/app/src/main/res/drawable/

# AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.attendanceapp">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AttendanceApp"
        android:usesCleartextTraffic="true">
        
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="${applicationId}.provider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>
    </application>
</manifest>

# build.gradle (Project)
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

# build.gradle (Module: app)
plugins {
    id 'com.android.application'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.attendanceapp"
        minSdk 23
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    // Location Services
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    
    // Networking
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    
    // Image Loading
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

# MainActivity.java
package com.example.attendanceapp;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.location.Location;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.FileProvider;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MainActivity extends AppCompatActivity {
    private static final int REQUEST_CAMERA_PERMISSION = 100;
    private static final int REQUEST_LOCATION_PERMISSION = 101;
    private static final int REQUEST_IMAGE_CAPTURE = 102;

    private ImageView photoPreview;
    private TextView gpsCoordinates;
    private MaterialButton btnCapture, btnSubmit;
    private CircularProgressIndicator progressIndicator;
    
    private FusedLocationProviderClient fusedLocationClient;
    private Location currentLocation;
    private String currentPhotoPath;
    private File photoFile;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initializeViews();
        setupLocationClient();
        setupClickListeners();
        checkPermissions();
    }

    private void initializeViews() {
        photoPreview = findViewById(R.id.photoPreview);
        gpsCoordinates = findViewById(R.id.gpsCoordinates);
        btnCapture = findViewById(R.id.btnCapture);
        btnSubmit = findViewById(R.id.btnSubmit);
        progressIndicator = findViewById(R.id.progressIndicator);
    }

    private void setupLocationClient() {
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
    }

    private void setupClickListeners() {
        btnCapture.setOnClickListener(v -> {
            if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
            } else {
                dispatchTakePictureIntent();
            }
        });

        btnSubmit.setOnClickListener(v -> {
            if (photoFile == null) {
                Toast.makeText(this, "Ambil foto terlebih dahulu", Toast.LENGTH_SHORT).show();
                return;
            }
            if (currentLocation == null) {
                Toast.makeText(this, "Menunggu lokasi GPS", Toast.LENGTH_SHORT).show();
                return;
            }
            submitAttendance();
        });
    }

    private void checkPermissions() {
        if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_PERMISSION);
        } else {
            getLocation();
        }
    }

    private void getLocation() {
        try {
            fusedLocationClient.getLastLocation()
                .addOnSuccessListener(this, location -> {
                    if (location != null) {
                        currentLocation = location;
                        updateLocationDisplay();
                    }
                });
        } catch (SecurityException e) {
            e.printStackTrace();
            Toast.makeText(this, "Error getting location", Toast.LENGTH_SHORT).show();
        }
    }

    private void updateLocationDisplay() {
        if (currentLocation != null) {
            String coordinates = String.format(Locale.getDefault(),
                "GPS: %.6f, %.6f",
                currentLocation.getLatitude(),
                currentLocation.getLongitude());
            gpsCoordinates.setText(coordinates);
        }
    }

    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            try {
                photoFile = createImageFile();
                if (photoFile != null) {
                    Uri photoURI = FileProvider.getUriForFile(this,
                        getApplicationContext().getPackageName() + ".provider",
                        photoFile);
                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                    startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
                }
            } catch (IOException ex) {
                Toast.makeText(this, "Error creating image file", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private File createImageFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        String imageFileName = "JPEG_" + timeStamp + "_";
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(
            imageFileName,
            ".jpg",
            storageDir
        );
        currentPhotoPath = image.getAbsolutePath();
        return image;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
            photoPreview.setImageURI(Uri.fromFile(photoFile));
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CAMERA_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                dispatchTakePictureIntent();
            }
        } else if (requestCode == REQUEST_LOCATION_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                getLocation();
            }
        }
    }

    private void submitAttendance() {
        progressIndicator.setVisibility(View.VISIBLE);
        btnSubmit.setEnabled(false);

        AttendanceService.getInstance().submitAttendance(
            photoFile,
            currentLocation.getLatitude(),
            currentLocation.getLongitude(),
            new Callback<ResponseBody>() {
                @Override
                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
                    runOnUiThread(() -> {
                        progressIndicator.setVisibility(View.GONE);
                        btnSubmit.setEnabled(true);
                        
                        if (response.isSuccessful()) {
                            Toast.makeText(MainActivity.this, "Absensi berhasil!", Toast.LENGTH_SHORT).show();
                            // Reset UI
                            photoPreview.setImageResource(android.R.drawable.ic_menu_camera);
                            photoFile = null;
                        } else {
                            Toast.makeText(MainActivity.this, "Error: " + response.message(), Toast.LENGTH_SHORT).show();
                        }
                    });
                }

                @Override
                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
                    runOnUiThread(() -> {
                        progressIndicator.setVisibility(View.GONE);
                        btnSubmit.setEnabled(true);
                        Toast.makeText(MainActivity.this, "Error: " + t.getMessage(), Toast.LENGTH_SHORT).show();
                    });
                }
            }
        );
    }
}

# AttendanceService.java
package com.example.attendanceapp;

import java.io.File;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class AttendanceService {
    private static AttendanceService instance;
    private final AttendanceApi api;

    private AttendanceService() {
        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
        logging.setLevel(HttpLoggingInterceptor.Level.BODY);

        OkHttpClient client = new OkHttpClient.Builder()
            .addInterceptor(logging)
            .build();

        Retrofit retrofit = new Retrofit.Builder()
            .baseUrl(Config.BASE_URL)
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build();

        api = retrofit.create(AttendanceApi.class);
    }

    public static synchronized AttendanceService getInstance() {
        if (instance == null) {
            instance = new AttendanceService();
        }
        return instance;
    }

    public void submitAttendance(File photoFile, double latitude, double longitude, Callback<ResponseBody> callback) {
        RequestBody requestFile = RequestBody.create(photoFile, MediaType.parse("image/jpeg"));
        MultipartBody.Part photoPart = MultipartBody.Part.createFormData("photo", photoFile.getName(), requestFile);
        
        RequestBody latBody = RequestBody.create(String.valueOf(latitude), MediaType.parse("text/plain"));
        RequestBody lngBody = RequestBody.create(String.valueOf(longitude), MediaType.parse("text/plain"));

        api.submitAttendance(photoPart, latBody, lngBody).enqueue(callback);
    }
}

# AttendanceApi.java
package com.example.attendanceapp;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.Part;

public interface AttendanceApi {
    @Multipart
    @POST("api/attendance")
    Call<ResponseBody> submitAttendance(
        @Part MultipartBody.Part photo,
        @Part("latitude") RequestBody latitude,
        @Part("longitude") RequestBody longitude
    );
}

# Config.java
package com.example.attendanceapp;

public class Config {
    // Change this to your actual backend URL
    public static final String BASE_URL = "http://your-backend-url.com/";
}

# activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <TextView
        android:id="@+id/titleText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Attendance App"
        android:textSize="24sp"
        android:textStyle="bold"
        android:layout_marginTop="16dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <ImageView
        android:id="@+id/photoPreview"
        android:layout_width="200dp"
        android:layout_height="200dp"
        android:layout_marginTop="32dp"
        android:scaleType="centerCrop"
        android:src="@android:drawable/ic_menu_camera"
        android:background="@android:color/darker_gray"
        app:layout_constraintTop_toBottomOf="@id/titleText"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/gpsCoordinates"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="GPS: Waiting for location..."
        android:layout_marginTop="16dp"
        app:layout_constraintTop_toBottomOf="@id/photoPreview"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <com.google.android.material.button.MaterialButton
        android:id="@+id/btnCapture"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Ambil Foto"
        android:layout_marginTop="32dp"
        app:layout_constraintTop_toBottomOf="@id/gpsCoordinates"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <com.google.android.material.button.MaterialButton
        android:id="@+id/btnSubmit"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Kirim Absensi"
        android:layout_marginTop="16dp"
        app:layout_constraintTop_toBottomOf="@id/btnCapture"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <com.google.android.material.progressindicator.CircularProgressIndicator
        android:id="@+id/progressIndicator"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:indeterminate="true"
        android:visibility="gone"
        android:layout_marginTop="16dp"
        app:layout_constraintTop_toBottomOf="@id/btnSubmit"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

</androidx.constraintlayout.widget.ConstraintLayout>

# strings.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Attendance App</string>
</resources>

# file_paths.xml
<?xml version="1.0" encoding="utf-8"?>
<paths xmlns:android="http://schemas.android.com/apk/res/android">
    <external-files-path name="my_images" path="Pictures" />
</paths>

# colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

# themes.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="Theme.AttendanceApp" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
    </style>
</resources>
PK
     �V            	   README.md
# Android Attendance App

This is an Android attendance application that captures photos and GPS coordinates for attendance tracking.

## Features

- Photo capture using device camera
- GPS location tracking
- Integration with PHP/MySQL backend
- Modern Material Design UI
- Runtime permissions handling
- Error handling and user feedback

## Setup

1. Open the project in Android Studio
2. Update the `BASE_URL` in `Config.java` to point to your backend server
3. Build and run the application

## Backend API Requirements

The backend should accept a POST request to `/api/attendance` with the following multipart form data:

- photo: Image file (JPEG)
- latitude: GPS latitude
- longitude: GPS longitude

## Dependencies

- AndroidX and Material Design components
- Google Play Services Location
- Retrofit for networking
- Glide for image loading

## Permissions

The app requires the following permissions:

- Camera
- Location (Fine and Coarse)
- Internet
- External Storage (for saving photos)

PK
